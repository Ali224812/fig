#!/usr/bin/ruby

# Script for running Torque jobs (calls qsub).
# Creates a dedicated directory in state/execs for each job.
# Output is written to stdout and stderr.
#
# One-time initialization:
#   mkdir -p state/execs
#   touch state/lastExec
#
# General usage:
#   qcreate <command> <arg> ... <arg>
# 
# Usage for fig programs:
#   qcreate java ... -execDir _OUTPATH_ -overwriteExecDir
#
# If you want to run locally,
#   qcreate -local <command>

lastExecFile = "state/lastExec"
f = File.open(lastExecFile, 'r+')
if f.flock(File::LOCK_EX) != 0
  puts "Error: unable to lock #{lastExecFile}"
  exit 1
end
id = f.read
begin
  id = id == '' ? 0 : Integer(id)
  id += 1
  f.rewind
  f.puts id
  f.flush
  f.truncate(f.pos)
rescue
  puts "Error: #{lastExecFile} has '#{id}' which is not an integer"
  id = nil
end
f.close

execPath = "state/execs/#{id}.exec"
if not Dir.mkdir(execPath)
  puts "Already exists (this shouldn't happen): #{execPath}"
  exit 1
end

if ARGV[0] == '-local'
  local = true
  ARGV.shift
end

cmdFile = "#{execPath}/#{id}.sh"
out = open(cmdFile, 'w')
cmd = ARGV.map{|x| x =~ /[ "]/ ? x.inspect : x}.join(' ').gsub(/_OUTPATH_/, execPath)
cmd += " > #{execPath}/stdout 2> #{execPath}/stderr" if not local
out.puts "cd #{Dir.pwd}"
out.puts cmd
out.close
puts cmd

system "git rev-parse HEAD > #{execPath}/git-hash" if File.exists?('.git')

if local
  exec("bash #{cmdFile}")
else
  exec("qsub #{cmdFile} -o /dev/null -e /dev/null")
end
